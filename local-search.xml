<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Android端油猴脚本使用教程</title>
    <link href="/2022/05/12/Install-Browser-Script-On-Android-Device/"/>
    <url>/2022/05/12/Install-Browser-Script-On-Android-Device/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>懒得写了，直接上教程吧</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><ul><li>Kiwi Browser: <a href="https://github.com/kiwibrowser/src.next/releases">GitHub</a></li><li>脚本加载器（推荐使用暴力猴）: <a href="https://chrome.google.com/webstore/detail/violentmonkey/jinjaccalgkegednnccohejagnlnfdag">Chrome扩展商店</a></li><li>需安装脚本（这里以独轮车为例，你也可以在GreasyFork等地在线安装）<br><a href="https://pan.igjbbs.cn/s/Qqziq">以上所提到所有资源的国内打包下载</a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1></li></ul><ol><li>安装Kiwi Browser并打开</li><li>点击右上角菜单中的扩展程序，选择+ (from .zip&#x2F;.crx&#x2F;.user.js)<br><img src="/img/2022/05/12/Screenshot_20220512-232612551_(1).jpg"><br><img src="/img/2022/05/12/Screenshot_20220512-234744244_(1).jpg"></li><li>选择下载的 Violentmonkey-beta-webext-v2.13.0.19.zip ，等待安装<br>（如果您可以正常访问Google Chrome扩展商店可以直接跳过2和3，直接<a href="https://chrome.google.com/webstore/detail/violentmonkey/jinjaccalgkegednnccohejagnlnfdag">点击这里</a>，选择添加到Chrome）<br><img src="/img/2022/05/12/Screenshot_20220512-232840773_(1).jpg"><br>至此，您现已可以直接在GreasyFork等处直接安装脚本了</li></ol><h2 id="从本地安装脚本"><a href="#从本地安装脚本" class="headerlink" title="从本地安装脚本"></a>从本地安装脚本</h2><p>打开菜单栏中的Violentmonkey BETA，点击加号，将脚本内容复制进去并保存<br><img src="/img/2022/05/12/Screenshot_20220512-232922035_(1).jpg"><br><img src="/img/2022/05/12/Screenshot_20220512-233456229_(1).jpg"><br><img src="/img/2022/05/12/Screenshot_20220512-233634707.jpg"><br>然后打开目标网站看效果（使用独轮车之类的脚本记得打开菜单的桌面版网站）<br><img src="/img/2022/05/12/Screenshot_20220512-233943280_(1).jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Chrome</tag>
      
      <tag>JavaScript</tag>
      
      <tag>油猴</tag>
      
      <tag>暴力猴</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022年，如何优雅的在Arch或Ubuntu上安装Pulseaudio-dlna</title>
    <link href="/2022/05/01/Install-Pulseaudio-dlna-On-Arch-And-Ubuntu/"/>
    <url>/2022/05/01/Install-Pulseaudio-dlna-On-Arch-And-Ubuntu/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直以来我都在寻找一种「优雅」的方式将PC上的音频投送到音箱等设备播放，类似小米秒播这种形式。不过小米秒播只支持小米自家的设备，用蓝牙传输的话也不太稳定，但大部分音箱设备都支持DLNA，所以就有了用pulseaudio-dlna连接的想法。最近把我用了很久的Ubuntu换成了Arch，就顺便写篇文章记录下，也避免后人踩坑。</p><p>这种方式传输的优劣：</p><p>优</p><ul><li>传输音质高</li><li>传输稳定</li><li>硬件要求低（只需要有稳定的局域网连接）</li></ul><p>劣</p><ul><li>传输延迟较高（5-10秒）<br>一般放音乐没多大影响，看剧啥的还是放弃吧（<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">Tip: 这篇教程以<span class="hljs-keyword">Arch</span>为例，本人仅在<span class="hljs-keyword">Arch</span>和Ubuntu上测试过，其他系统理论同理，请自行研究～<br></code></pre></td></tr></table></figure></li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>我选择的是GitLab上的<a href="https://gitlab.com/joecksma/pulseaudio-dlna">pulseaudio-dlna</a>仓库，因为GitHub上的原版年久失修（而且之前好像试过没跑起来？）<br>按照README的提示，我们需要先准备安装一些依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Ubuntu</span><br>sudo apt-get install python3 python3-pip python3-setuptools python3-dbus python3-docopt python3-requests python3-setproctitle python3-gi python3-notify2 python3-psutil python3-chardet python3-netifaces python3-pyroute2 python3-netaddr python3-lxml python3-pychromecast vorbis-tools sox lame flac faac opus-tools virtualenv python3-dev<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Arch</span><br>sudo pacman -S yay<br>yay -S python3 python-pip python-setuptools python-dbus python-docopt python-requests python-setproctitle python-gobject python-notify2 python-psutil python-chardet python-netifaces python-pyroute2 python-netaddr python-lxml python-pychromecast vorbis-tools sox lame flac faac opus-tools python-virtualenv<br><span class="hljs-meta prompt_"># </span><span class="language-bash">注：yay下安装软件**不需要**root权限</span><br></code></pre></td></tr></table></figure><p>在Arch下安装的时候yay可能会提示需要选择提供者，直接回车即可<br><img src="/img/2022/05/01/1.png" alt="1"></p><p>完成准备工作之后clone<a href="https://gitlab.com/joecksma/pulseaudio-dlna">这个仓库</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://gitlab.com/joecksma/pulseaudio-dlna.git<br></code></pre></td></tr></table></figure><p>最后构建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd pulseaudio-dlna<br>make<br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">Tip:</span> 不要执行`make install`，这会导致执行pulseaudio-dlna时报错，你可以通过将`bin/pulseaudio-dlna`移动到`/usr/bin`下来达到相同目的<br></code></pre></td></tr></table></figure><p>构建的文件会在<code>bin/pulseaudio-dlna</code>，我们先执行下看看<br><img src="/img/2022/05/01/2.png" alt="2"><br>可见，pulseaudio-dlna已经成功跑起来了，那我们放个音频试试<br>（跑不起来的确定已经安装pulseaudio）<br><img src="/img/2022/05/01/3.png" alt="3"><br>寄！但是别慌，我们看下日志</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">INFO</span>     There was <span class="hljs-literal">no</span> suitable codec found <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;小爱音箱-7838 (DLNA)&quot;</span>. The device can play <span class="hljs-string">&quot;&quot;</span>. Install one of following encoders: <span class="hljs-string">&quot;&quot;</span>. You can also try <span class="hljs-keyword">to</span> <span class="hljs-built_in">disable</span> the mime<span class="hljs-built_in"> type </span>check with the <span class="hljs-string">&quot;--disable-mimetype-check&quot;</span> flag. But be warned: <span class="hljs-keyword">In</span> that way you can use codecs your device does <span class="hljs-keyword">not</span> support officially <span class="hljs-keyword">and</span> this could lead <span class="hljs-keyword">to</span> distortions <span class="hljs-keyword">or</span> <span class="hljs-keyword">in</span> rare cases <span class="hljs-keyword">to</span> speaker damage!<br><span class="hljs-built_in">ERROR</span>    The device <span class="hljs-string">&quot;小爱音箱-7838 (DLNA)&quot;</span> failed <span class="hljs-keyword">to</span> play! (500) - <span class="hljs-string">&quot;小爱音箱-7838 (DLNA)&quot;</span> : Could <span class="hljs-keyword">not</span> <span class="hljs-built_in">find</span> a suitable encoder!<br></code></pre></td></tr></table></figure><p>这是因为没有识别到兼容的编码器导致的，修复方法也很简单，启动时加个参数就行<br><code>--disable-mimetype-check</code><br><img src="/img/2022/05/01/4.jpg" alt="4"><br>最后加个开机自启，创建文件<code>~/.config/autostart/pulseaudio-dlna.desktop</code>，填入以下内容<br><code>这里我将bin文件移动到了/usr/bin，如果你没有这么做请自行修改Exec下的命令</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs desktop">[Desktop Entry]<br>Type=Application<br>Exec=pulseaudio-dlna --disable-mimetype-check<br>Hidden=false<br>NoDisplay=true<br>X-GNOME-Autostart-enabled=true<br>Name[zh_CN]=pulseaudio-dlna<br>Name=pulseaudio-dlna<br>Comment[zh_CN]=<br>Comment=<br></code></pre></td></tr></table></figure><p>也可以通过<code>gnome-session-properties</code>之类的工具设置（上面这个文件就是自动生成的），参见 <a href="https://blog.csdn.net/lxyoucan/article/details/119108131">https://blog.csdn.net/lxyoucan/article/details/119108131</a><br>最后重启看效果</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>当你查看Github仓库<code>masmu/pulseaudio-dlna</code>会发现一个很可惜的事实，这个仓库的最后更新日期是2017年11月2日（截止本文章发布前），也就是说这个项目已经几乎被放弃，当你在5年后的今天尝试去部署这个项目，或许会像我一样发现原仓库已经完全跑不起来了（<br>所以我在这里随手记录一下，说不定就能帮上些人呢（如果帮上你了麻烦在评论告诉我，谢谢 :D）</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Arch</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>Pulseaudio</tag>
      
      <tag>Pulseaudio-dlna</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/01/hello-world/"/>
    <url>/2022/05/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
